// Lisatakse teatud teegi
#include <ESP8266WiFi.h>
#include <Wire.h>
#include <RTClib.h>

// Defineeritakse väljundid
#define     LED0      2
#define     R         D0
#define     G         D3
#define     Y         D4
#define     R1        D5
#define     Y1        D6
#define     G1        D7

const char*       TKDssid = "ESPsoftAP_01";              // Luuakse Serveri WiFi nimi
const char*       TKDpassword = "pass0077";          // Luuakse Serveri parool

WiFiServer  TKDServer(9001);      // Määratakse serveri pordi
WiFiClient  TKDClient[200];     // Määratakse maksimaalse saatjate
//arvu, mis kuvab jälgimis monitooringul

RTC_DS3231 rtc;                     // Luuakse rtc objekti

  //Luuakse muutujad valgufoori ooteaega seadistamiseks
  int MolemadPunasedPikk;
  int MolemadPunasedLuhike;
  int MolemadRohelised;
  int MolemadPunasedTuhi;
  int MolemadRohelisedTuhi;

void setup()
{
  // Seadistatakse Serial Pordi
  Serial.begin(115200);
  Wire.begin();                   // Kasutatakse, et Serial Pordile ei tuleks ette tundmatuid sümboleid

  // Seadistatakse väljundid
  pinMode(LED0, OUTPUT);
  pinMode(D0, OUTPUT);
  pinMode(D3, OUTPUT);
  pinMode(D4, OUTPUT);
  pinMode(D5, OUTPUT);
  pinMode(D6, OUTPUT);
  pinMode(D7, OUTPUT);

  // Prinditakse välja kiri, et seade läks tööle
  Serial.println();
  Serial.println("I/O Pins Modes Set .... Done");

  // Seadistatakse automaatne kellaeg
  rtc.begin();
  rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));

  // WiFi seadistamine
  SetWifi("ESPsoftAP_01", "");

}

void loop()
{
  //Kutsutakse välja funktsiooni.
  //Seadestatakse valgusfoori ooteaega,
  //kui objektil käib töö.

  MolemadPunasedPikk = 3000;
  MolemadPunasedLuhike = 2000;
  MolemadRohelised = 1000;

  //Seadestatakse valgusfoori ooteaega,
  //kui objektil ei ole kedagi.

  MolemadPunasedTuhi = 1000;
  MolemadRohelisedTuhi = 1000;

  IsClients();

}

void SetWifi(char* TKDssid, char* TKDpassword)
{
  // Kõikide eelmise protsesside peatamine
  WiFi.disconnect();

  // Seadistatakse WiFi režiimi
  WiFi.mode(WIFI_AP_STA);
  Serial.println("WIFI Mode : AccessPoint Station");

  // WiFi tööle rakendamine
  WiFi.softAP(TKDssid, TKDpassword);
  Serial.println("WIFI < " + String(TKDssid) + " > ... Started");

  delay(1000);

  // Serveri IP aadressi saamine
  IPAddress IP = WiFi.softAPIP();

  // Prinditakse Serveri IP Aadress
  Serial.print("AccessPoint IP : ");
  Serial.println(IP);

  // Serveri käivitamine
  TKDServer.begin();
  Serial.println("Server Started");
}

void IsClients()
{

  //kontrollitakse kliendilt WiFi parooli, kui kõik klappib,
  //siis saab edasi tsüklile
  boolean result = WiFi.softAP(TKDssid, TKDpassword);
  if (result == true)
  {
    if (TKDServer.hasClient())
    {
      WiFiClient TKDClient = TKDServer.available();

      if (TKDClient.available())
      {

        String Message = TKDClient.readStringUntil('\r');
        // Prinditakse välja kirja Serial Pordile
        DateTime now = rtc.now();
        Serial.print(now.day(), DEC);
        Serial.print('/');
        Serial.print(now.month(), DEC);
        Serial.print('/');
        Serial.print(now.year(), DEC);
        Serial.print(' ');
        Serial.print(now.hour(), DEC);
        Serial.print(':');
        Serial.print(now.minute(), DEC);
        Serial.print(' ');
        Serial.print('-');
        Serial.print(' ');
        Serial.println(Message);
        // Kliendile vastamine Serveri poolt, et sõnum tuli kohale
        TKDClient.print("\nWe Got Your Message");
        TKDClient.flush();

        // Ehitatakse kahe valgusfoori algoritm, ning kutsutakse välja funktsioonid

        Molemad_R_Pikk();
        VF_R_Y();
        VF_G();
        VF_G_Vilgub();
        VF_Y();
        Molemad_R_Luhike();
        VF1_R1_Y1();
        VF1_G1();
        VF1_G1_Vilgub();
        VF1_Y1();
      }
    } else
    {
      Molemad_R_Tuhi();
      VF_R_Y();
      VF_G_tuhi();
      VF_G_Vilgub();
      VF_Y();
      Molemad_R_Tuhi();
      VF1_R1_Y1();
      VF1_G1_tuhi();
      VF1_G1_Vilgub();
      VF1_Y1();
    }
  }
}

//Luuakse eraldi valgusfoori funktsioonid, et hiljem oleks lihtsam nendest luua valgusfoori algoritmi

//Luuakse funktsioonid mõlema valgufooriks, mis ei muutu

void VF_R_Y() {
  digitalWrite(R, HIGH);
  digitalWrite(Y, HIGH);
  digitalWrite(G, LOW);
  digitalWrite(R1, HIGH);
  digitalWrite(Y1, LOW);
  digitalWrite(G1, LOW);
  delay(500);
}
void VF_G_Vilgub() {
  digitalWrite(R, LOW);
  digitalWrite(Y, LOW);
  digitalWrite(G, LOW);
  digitalWrite(R1, HIGH);
  digitalWrite(Y1, LOW);
  digitalWrite(G1, LOW);
  delay(250);
  digitalWrite(R, LOW);
  digitalWrite(Y, LOW);
  digitalWrite(G, HIGH);
  digitalWrite(R1, HIGH);
  digitalWrite(Y1, LOW);
  digitalWrite(G1, LOW);
  delay(250);
  digitalWrite(R, LOW);
  digitalWrite(Y, LOW);
  digitalWrite(G, LOW);
  digitalWrite(R1, HIGH);
  digitalWrite(Y1, LOW);
  digitalWrite(G1, LOW);
  delay(250);
  digitalWrite(R, LOW);
  digitalWrite(Y, LOW);
  digitalWrite(G, HIGH);
  digitalWrite(R1, HIGH);
  digitalWrite(Y1, LOW);
  digitalWrite(G1, LOW);
  delay(250);
  digitalWrite(R, LOW);
  digitalWrite(Y, LOW);
  digitalWrite(G, LOW);
  digitalWrite(R1, HIGH);
  digitalWrite(Y1, LOW);
  digitalWrite(G1, LOW);
  delay(250);
  digitalWrite(R, LOW);
  digitalWrite(Y, LOW);
  digitalWrite(G, HIGH);
  digitalWrite(R1, HIGH);
  digitalWrite(Y1, LOW);
  digitalWrite(G1, LOW);
  delay(250);
}
void VF_Y() {
  digitalWrite(R, LOW);
  digitalWrite(Y, HIGH);
  digitalWrite(G, LOW);
  digitalWrite(R1, HIGH);
  digitalWrite(Y1, LOW);
  digitalWrite(G1, LOW);
  delay(500);
}
void VF1_R1_Y1() {
  digitalWrite(R, HIGH);
  digitalWrite(Y, LOW);
  digitalWrite(G, LOW);
  digitalWrite(R1, HIGH);
  digitalWrite(Y1, HIGH);
  digitalWrite(G1, LOW);
  delay(500);
}
void VF1_G1_Vilgub() {
  digitalWrite(R, HIGH);
  digitalWrite(Y, LOW);
  digitalWrite(G, LOW);
  digitalWrite(R1, LOW);
  digitalWrite(Y1, LOW);
  digitalWrite(G1, LOW);
  delay(250);
  digitalWrite(R, HIGH);
  digitalWrite(Y, LOW);
  digitalWrite(G, LOW);
  digitalWrite(R1, LOW);
  digitalWrite(Y1, LOW);
  digitalWrite(G1, HIGH);
  delay(250);
  digitalWrite(R, HIGH);
  digitalWrite(Y, LOW);
  digitalWrite(G, LOW);
  digitalWrite(R1, LOW);
  digitalWrite(Y1, LOW);
  digitalWrite(G1, LOW);
  delay(250);
  digitalWrite(R, HIGH);
  digitalWrite(Y, LOW);
  digitalWrite(G, LOW);
  digitalWrite(R1, LOW);
  digitalWrite(Y1, LOW);
  digitalWrite(G1, HIGH);
  delay(250);
  digitalWrite(R, HIGH);
  digitalWrite(Y, LOW);
  digitalWrite(G, LOW);
  digitalWrite(R1, LOW);
  digitalWrite(Y1, LOW);
  digitalWrite(G1, LOW);
  delay(250);
  digitalWrite(R, HIGH);
  digitalWrite(Y, LOW);
  digitalWrite(G, LOW);
  digitalWrite(R1, LOW);
  digitalWrite(Y1, LOW);
  digitalWrite(G1, HIGH);
  delay(250);
}
void VF1_Y1() {
  digitalWrite(R, HIGH);
  digitalWrite(Y, LOW);
  digitalWrite(G, LOW);
  digitalWrite(R1, LOW);
  digitalWrite(Y1, HIGH);
  digitalWrite(G1, LOW);
  delay(500);
}

// Luuakse funktsioonid, kui objektil ei ole kedagi

void Molemad_R_Tuhi() {
  digitalWrite(R, HIGH);
  digitalWrite(Y, LOW);
  digitalWrite(G, LOW);
  digitalWrite(R1, HIGH);
  digitalWrite(Y1, LOW);
  digitalWrite(G1, LOW);
  delay(MolemadPunasedTuhi);
}
void VF_G_tuhi() {
  digitalWrite(R, LOW);
  digitalWrite(Y, LOW);
  digitalWrite(G, HIGH);
  digitalWrite(R1, HIGH);
  digitalWrite(Y1, LOW);
  digitalWrite(G1, LOW);
  delay(MolemadRohelisedTuhi);
}
void VF1_G1_tuhi() {
  digitalWrite(R, HIGH);
  digitalWrite(Y, LOW);
  digitalWrite(G, LOW);
  digitalWrite(R1, LOW);
  digitalWrite(Y1, LOW);
  digitalWrite(G1, HIGH);
  delay(MolemadRohelisedTuhi);
}

// Luuakse funktsioonid, kui objektil käib töö

void Molemad_R_Pikk() {
  digitalWrite(R, HIGH);
  digitalWrite(Y, LOW);
  digitalWrite(G, LOW);
  digitalWrite(R1, HIGH);
  digitalWrite(Y1, LOW);
  digitalWrite(G1, LOW);
  delay(MolemadPunasedPikk);
}
void Molemad_R_Luhike() {
  digitalWrite(R, HIGH);
  digitalWrite(Y, LOW);
  digitalWrite(G, LOW);
  digitalWrite(R1, HIGH);
  digitalWrite(Y1, LOW);
  digitalWrite(G1, LOW);
  delay(MolemadPunasedLuhike);
}
void VF1_G1() {
  digitalWrite(R, HIGH);
  digitalWrite(Y, LOW);
  digitalWrite(G, LOW);
  digitalWrite(R1, LOW);
  digitalWrite(Y1, LOW);
  digitalWrite(G1, HIGH);
  delay(MolemadRohelised);
}
void VF_G() {
  digitalWrite(R, LOW);
  digitalWrite(Y, LOW);
  digitalWrite(G, HIGH);
  digitalWrite(R1, HIGH);
  digitalWrite(Y1, LOW);
  digitalWrite(G1, LOW);
  delay(MolemadRohelised);
}
